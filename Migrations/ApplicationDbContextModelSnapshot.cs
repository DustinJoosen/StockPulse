// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockPulse.Data;

#nullable disable

namespace StockPulse.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("StockPulse.Models.Customer", b =>
                {
                    b.Property<string>("PersonEmail")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("person");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonEmail");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("StockPulse.Models.Employee", b =>
                {
                    b.Property<string>("PersonEmail")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("person");

                    b.Property<DateTime>("EmployeeSince")
                        .HasColumnType("datetime2")
                        .HasColumnName("employee_since");

                    b.Property<double>("MonthlySalary")
                        .HasColumnType("float")
                        .HasColumnName("montly_salary");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("profile_picture_path");

                    b.Property<string>("SaltedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("salted_password");

                    b.HasKey("PersonEmail");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("StockPulse.Models.EmployeeRole", b =>
                {
                    b.Property<string>("EmployeeEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EmployeeEmail", "Name");

                    b.ToTable("EmployeeRoles");
                });

            modelBuilder.Entity("StockPulse.Models.Order", b =>
                {
                    b.Property<int>("OrderNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_num");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderNum"), 1L, 1);

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("customer");

                    b.Property<string>("DeliveryNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("delivery_notes");

                    b.Property<double?>("DiscountPrice")
                        .HasColumnType("float")
                        .HasColumnName("discount_price");

                    b.HasKey("OrderNum");

                    b.HasIndex("CustomerEmail");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("StockPulse.Models.OrderLine", b =>
                {
                    b.Property<int>("ProductNum")
                        .HasColumnType("int")
                        .HasColumnName("product_num");

                    b.Property<int>("OrderNum")
                        .HasColumnType("int")
                        .HasColumnName("order_num");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("warehouse");

                    b.HasKey("ProductNum", "OrderNum");

                    b.HasIndex("OrderNum");

                    b.HasIndex("WarehouseId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("StockPulse.Models.Person", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Particle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pronouns")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("StockPulse.Models.Product", b =>
                {
                    b.Property<int>("ProductNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_num");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductNum"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PurchasePrice")
                        .HasColumnType("float")
                        .HasColumnName("purchase_price");

                    b.Property<double>("SellingPrice")
                        .HasColumnType("float")
                        .HasColumnName("selling_price");

                    b.HasKey("ProductNum");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("StockPulse.Models.ProductStock", b =>
                {
                    b.Property<int>("ProductNum")
                        .HasColumnType("int")
                        .HasColumnName("product_num");

                    b.Property<int>("WareHouseId")
                        .HasColumnType("int")
                        .HasColumnName("warehouse");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductNum", "WareHouseId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("ProductStocks");
                });

            modelBuilder.Entity("StockPulse.Models.Role", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Name = "Customer"
                        },
                        new
                        {
                            Name = "Employee"
                        },
                        new
                        {
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("StockPulse.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("manager");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerEmail")
                        .IsUnique();

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("StockPulse.Models.Customer", b =>
                {
                    b.HasOne("StockPulse.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("StockPulse.Models.Employee", b =>
                {
                    b.HasOne("StockPulse.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("StockPulse.Models.EmployeeRole", b =>
                {
                    b.HasOne("StockPulse.Models.Employee", "Employee")
                        .WithMany("Roles")
                        .HasForeignKey("EmployeeEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("StockPulse.Models.Order", b =>
                {
                    b.HasOne("StockPulse.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("StockPulse.Models.OrderLine", b =>
                {
                    b.HasOne("StockPulse.Models.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderNum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockPulse.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductNum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockPulse.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("StockPulse.Models.ProductStock", b =>
                {
                    b.HasOne("StockPulse.Models.Product", "Product")
                        .WithMany("ProductStocks")
                        .HasForeignKey("ProductNum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockPulse.Models.Warehouse", "Warehouse")
                        .WithMany("ProductStocks")
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("StockPulse.Models.Warehouse", b =>
                {
                    b.HasOne("StockPulse.Models.Employee", "Manager")
                        .WithOne("Warehouse")
                        .HasForeignKey("StockPulse.Models.Warehouse", "ManagerEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("StockPulse.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("StockPulse.Models.Employee", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Warehouse")
                        .IsRequired();
                });

            modelBuilder.Entity("StockPulse.Models.Order", b =>
                {
                    b.Navigation("OrderLines");
                });

            modelBuilder.Entity("StockPulse.Models.Product", b =>
                {
                    b.Navigation("ProductStocks");
                });

            modelBuilder.Entity("StockPulse.Models.Warehouse", b =>
                {
                    b.Navigation("ProductStocks");
                });
#pragma warning restore 612, 618
        }
    }
}
